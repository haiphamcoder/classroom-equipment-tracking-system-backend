name: Deploy to Amazon ECS with Development Environment

on:
  push:
    branches: [ "feature-dev" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: classroom-equipment-tracking-system
  ECS_SERVICE: classroom-equipment-tracking-system
  ECS_CLUSTER: DevCluster
  ECS_TASK_DEFINITION: .aws/classroom-equipment-tracking-system.json
  CONTAINER_NAME: classroom-equipment-tracking-system

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Update Environment Variables
        id: update-env-vars
        env:
          GMAIL_SMTP_HOST: ${{ vars.GMAIL_SMTP_HOST }}
          GMAIL_SMTP_PORT: ${{ vars.GMAIL_SMTP_PORT }}
          GMAIL_SMTP_USERNAME: ${{ vars.GMAIL_SMTP_USERNAME }}
          GMAIL_SMTP_PASSWORD: ${{ vars.GMAIL_SMTP_PASSWORD }}
        run: |
          cat ${{ steps.task-def.outputs.task-definition }} > task-definition-tmp.json
          jq --arg GMAIL_SMTP_HOST "$GMAIL_SMTP_HOST" \
             --arg GMAIL_SMTP_PORT "$GMAIL_SMTP_PORT" \
             --arg GMAIL_SMTP_USERNAME "$GMAIL_SMTP_USERNAME" \
             --arg GMAIL_SMTP_PASSWORD "$GMAIL_SMTP_PASSWORD" \
             '.containerDefinitions[0].environment |= map(
               if .name == "GMAIL_SMTP_HOST" then .value = $GMAIL_SMTP_HOST
               elif .name == "GMAIL_SMTP_PORT" then .value = $GMAIL_SMTP_PORT
               elif .name == "GMAIL_SMTP_USERNAME" then .value = $GMAIL_SMTP_USERNAME
               elif .name == "GMAIL_SMTP_PASSWORD" then .value = $GMAIL_SMTP_PASSWORD
               else . end
             )' task-definition-tmp.json > classroom-equipment-tracking-system.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: classroom-equipment-tracking-system.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
