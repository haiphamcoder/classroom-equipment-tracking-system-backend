name: CI Development

on:
  push:
    branches: [ "feature-dev" ]
  pull_request:
    branches: [ "feature-dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        env:
          GMAIL_SMTP_HOST: ${{ secrets.GMAIL_SMTP_HOST }}
          GMAIL_SMTP_PORT: ${{ secrets.GMAIL_SMTP_PORT }}
          GMAIL_SMTP_USERNAME: ${{ secrets.GMAIL_SMTP_USERNAME }}
          GMAIL_SMTP_PASSWORD: ${{ secrets.GMAIL_SMTP_PASSWORD }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: development

    permissions:
      contents: read
      id-token: write

    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
      GKE_ZONE: ${{ secrets.GKE_ZONE }}
      DEPLOYMENT_NAME: ${{ secrets.DEPLOYMENT_NAME }}
      REPOSITORY: ${{ secrets.REPOSITORY }}
      IMAGE: ${{ secrets.IMAGE }}
      WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
      SA_EMAIL: ${{ secrets.SA_EMAIL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Configure Workload Identity Federation and generate an access token.
      - id: auth
        name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SA_EMAIL }}

      # Authenticate Docker to use Google Artifact Registry.
      - name: Configure Docker to use Google Artifact Registry
        run: |
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ env.GAR_LOCATION }}-docker.pkg.dev

      # Get the GKE credentials so we can deploy to the cluster.
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Build the Docker image.
      - name: Build and push Docker container
        run: |-
          DOCKER_TAG="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}"
          docker build . -t $DOCKER_TAG
          docker push $DOCKER_TAG

      # Set up kustomize.
      - name: Set up kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.5.0/kustomize_v5.5.0_linux_amd64.tar.gz
          chmod u+x ./kustomize

      # Replace variables in the kustomization file.
      - name: Replace variables in kustomization file
        run: |-
          sed -i "s/\${GAR_LOCATION}/${{ env.GAR_LOCATION }}/g" .k8s/deployment.yml
          sed -i "s/\${PROJECT_ID}/${{ env.PROJECT_ID }}/g" .k8s/deployment.yml
          sed -i "s/\${REPOSITORY}/${{ env.REPOSITORY }}/g" .k8s/deployment.yml
          sed -i "s/\${IMAGE}/${{ env.IMAGE }}/g" .k8s/deployment.yml
          sed -i "s/\${GITHUB_SHA}/${{ github.sha }}/g" .k8s/deployment.yml
          sed -i "s/\${GMAIL_SMTP_HOST}/${{ secrets.GMAIL_SMTP_HOST }}/g" .k8s/deployment.yml
          sed -i "s/\${GMAIL_SMTP_PORT}/${{ secrets.GMAIL_SMTP_PORT }}/g" .k8s/deployment.yml
          sed -i "s/\${GMAIL_SMTP_USERNAME}/${{ secrets.GMAIL_SMTP_USERNAME }}/g" .k8s/deployment.yml
          sed -i "s/\${GMAIL_SMTP_PASSWORD}/${{ secrets.GMAIL_SMTP_PASSWORD }}/g" .k8s/deployment.yml
          sed -i "s/\${TELEGRAM_BOT_TOKEN}/${{ secrets.TELEGRAM_BOT_TOKEN }}/g" .k8s/deployment.yml
          sed -i "s/\${GAR_LOCATION}/${{ env.GAR_LOCATION }}/g" .k8s/kustomization.yml
          sed -i "s/\${PROJECT_ID}/${{ env.PROJECT_ID }}/g" .k8s/kustomization.yml
          sed -i "s/\${REPOSITORY}/${{ env.REPOSITORY }}/g" .k8s/kustomization.yml
          sed -i "s/\${IMAGE}/${{ env.IMAGE }}/g" .k8s/kustomization.yml
          sed -i "s/\${GITHUB_SHA}/${{ github.sha }}/g" .k8s/kustomization.yml

      # Deploy the Docker image to the GKE cluster.
      - name: Deploy to GKE
        run: |-
          ./kustomize build .k8s/ | kubectl apply -f -
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
          kubectl get services -o wide